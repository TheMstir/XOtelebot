import telebot
import random
import time

from telebot import types
from telebot import custom_filters
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage

import config

# —ç—Ç–æ —É –Ω–∞—Å –º–µ—Å—Ç–Ω–∞—è '–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' –ø–æ–∫–∞ —á—Ç–æ –≤ –Ω–µ–π —Ö—Ä–∞–Ω–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫,
# –Ω–æ –∑–∞—Ç–æ –ø–æ–¥ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
cash_storage = StateMemoryStorage()

# –æ—Å–Ω–æ–≤–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–≤—è–∑–∫–∏
bot = telebot.TeleBot(config.ticket, state_storage=cash_storage)


class MyStates(StatesGroup):
    """–•—Ä–∞–Ω–ª–∏–ª–∏—â–µ –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã"""
    zone = State()  # –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    win_flag = State() #

    name = State() # –¥–ª—è –¥–æ—Å–∫–∏ –ø–æ—á–µ—Ç–∞
    count_win = State() # –ø–æ–¥—Å—á–µ—Ç –ø–æ–±–µ–¥. –ø–æ—Ä–∞–∂–µ–Ω–∏—è —ç—Ç–æ –≤—Å–µ –º–∏–Ω—É—Å –ø–æ–±–µ–¥—ã
    count_game = State() # –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä
    precent_difficult = State() # –µ—Å–ª–∏ –ø—Ä–∏–¥—É–º–∞—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å


@bot.message_handler(commands=['start'])
def send_welcome(message: types.Message):
    """
        –ú–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –≤–∏–¥–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–º–æ—â–∏
        –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –∏ –±—ã—Å—Ç—Ä–æ
        –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏ –ø—Ä–æ—Å—Ç–µ–Ω—å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
        """

    rand_m = random.randint(1, 2)

    mess = f'–ü—Ä–∏–≤–µ—Ç! <b>{message.from_user.first_name}</b> '

    bot.send_message(message.chat.id, mess, parse_mode='HTML')
    mess = '''–ü—Ä–∏–≤–µ—Ç —è ‚ùå‚≠ï –±–æ—Ç! –•–æ—á–µ—à—å –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏?:
/start –ß—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ –º–µ–Ω—é
/lets_go üéØ –ó–∞–ø—É—Å—Ç–∏—Ç –∏–≥—Ä—É! 
    
/legends –ë—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª—É—á—à–∏–π —Å—á–µ—Ç –∏ –∏—Å—Ç–æ—Ä–∏—é —Ö–æ–¥–æ–≤ –≤ –Ω–µ–º
/cancel ‚ùå –û—Ç–º–µ–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞
        '''

    bot.send_message(message.chat.id, mess, parse_mode='HTML')

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üëã –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä–∞—Ç—å!", "‚ùì Help/Menu")
    bot.send_message(message.from_user.id, '–Ø —É–º–µ—é –Ω–µ —Ç–∞–∫ —É–∂ –∏ –º–Ω–æ–≥–æ, –Ω–æ —Ç—É—Ç —É–∂ –∫—É–¥–∞ –¥–µ–≤–∞—Ç—å—Å—è, '
                                           '—è —Å–æ–∑–¥–∞–Ω —Ç–æ–ª—å–∫–æ —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å —Å —Ç–æ–±–æ–π –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏ –∏ –Ω–æ–ª–∏–∫–∏',
                     reply_markup=markup)


@bot.message_handler(commands=['lets_go'])
def base_game_func(message: types.Message):

    bot.set_state(message.from_user.id, MyStates.zone, message.chat.id)

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['zone'] = ['1', '2', '3', '4', '5', '6', '7', '8', '9']

    mess = ' '.join(data['zone'])
    bot.send_message(message.chat.id, mess, parse_mode='HTML')

    letsplay(message, data)


def letsplay(message, data):
    #while True:
        # —Ä–∏—Å—É–µ—Ç—Å—è —Å–µ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
        # if –Ω–µ—Ç —Ñ–ª–∞–≥–∞ –ø–æ–±–µ–¥—ã
    in_action(message, data['zone'])
        # elif


def in_action(message, base):
    markup_inline = types.InlineKeyboardMarkup()
    item_first = types.InlineKeyboardButton(text=base[0], callback_data='1')
    item_second = types.InlineKeyboardButton(text=base[1], callback_data='2')
    item_third = types.InlineKeyboardButton(text=base[2], callback_data='3')
    item_four = types.InlineKeyboardButton(text=base[3], callback_data='4')
    item_five = types.InlineKeyboardButton(text=base[4], callback_data='5')
    item_six = types.InlineKeyboardButton(text=base[5], callback_data='6')
    item_seven = types.InlineKeyboardButton(text=base[6], callback_data='7')
    item_eight = types.InlineKeyboardButton(text=base[7], callback_data='8')
    item_nine = types.InlineKeyboardButton(text=base[8], callback_data='9')

    markup_inline.add(item_first, item_second, item_third, item_four, item_five, item_six, item_seven, item_eight, item_nine)
    bot.send_message(message.chat.id, f'–û—Ç–ª–∏—á–Ω–æ, –≤–∞—à —Ö–æ–¥',
                     reply_markup=markup_inline)

    # bot.set_state(message.from_user.id, MyStates.zone, message.chat.id)
    # data = cash_storage.get_data(message.from_user.id, message.chat.id)


def resort(message, base):
    print(base)
    markup_inline = types.InlineKeyboardMarkup()
    item_first = types.InlineKeyboardButton(text=base['zone'][0], callback_data='/lets_go')
    item_second = types.InlineKeyboardButton(text=base['zone'][1], callback_data='/lets_go')
    item_third = types.InlineKeyboardButton(text=base['zone'][2], callback_data='/lets_go')
    item_four = types.InlineKeyboardButton(text=base['zone'][3], callback_data='/lets_go')
    item_five = types.InlineKeyboardButton(text=base['zone'][4], callback_data='/lets_go')
    item_six = types.InlineKeyboardButton(text=base['zone'][5], callback_data='/lets_go')
    item_seven = types.InlineKeyboardButton(text=base['zone'][6], callback_data='/lets_go')
    item_eight = types.InlineKeyboardButton(text=base['zone'][7], callback_data='/lets_go')
    item_nine = types.InlineKeyboardButton(text=base['zone'][8], callback_data='/lets_go')

    markup_inline.add(item_first, item_second, item_third, item_four, item_five, item_six, item_seven,
                      item_eight, item_nine)
    bot.send_message(message.chat.id, f'–í—ã –ø–æ–±–µ–¥–∏–ª–∏!', reply_markup=markup_inline)
    bot.send_message(message.chat.id, '–ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ? /lets_go')


@bot.callback_query_handler(func=lambda call: True)
def callbacker(call: types.CallbackQuery):
    """
    —Ç—ç–π–∫–±—ç–π–∫–µ—Ä
    —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏
    """
    place = 0
    if call.data == '1':
        place = 0
    elif call.data == '2':
        place = 1
    elif call.data == '3':
        place = 2
    elif call.data == '4':
        place = 3
    elif call.data == '5':
        place = 4
    elif call.data == '6':
        place = 5
    elif call.data == '7':
        place = 6
    elif call.data == '8':
        place = 7
    elif call.data == '9':
        place = 8

    bot.set_state(call.from_user.id, MyStates.zone, call.message.chat.id)
    with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
        while True:
            if data['zone'][place] != '‚ùå' and data['zone'][place] != '‚≠ï':
                data['zone'][place] = '‚ùå'
                break
            else:
                in_action(call.message, data)

        # —Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –±–∞–∑–æ–≤–æ
        while True:
            dice = random.randint(0, 8)
            if data['zone'][dice] != '‚ùå' and data['zone'][dice] != '‚≠ï':
                data['zone'][dice] = '‚≠ï'
                break
            else:
                dice = random.randint(0, 8)

    bord = ''
    for i in data['zone']:
        for j in i:
            bord += j
    print(bord)

    if bord[0:3] == '‚ùå' * 3 or bord[3:6] == '‚ùå' * 3 or bord[6:] == '‚ùå' * 3 or bord[0::4] == '‚ùå' * 3 or \
            bord[2:7:2] == '‚ùå' * 3 or bord[0:8:3] == '‚ùå' * 3 or bord[1:9:3] == '‚ùå' * 3 or bord[2::3] == '‚ùå' * 3:
        resort(call.message, data)
        # –æ—Ç—Å—é–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø–æ–±–µ–¥–∞.

    elif '1' not in bord and '2' not in bord and '3' not in bord and '4' not in bord and '5' not in bord \
            and '6' not in bord and '7' not in bord and '8' not in bord and '9' not in bord:
        bot.send_message(call.message.chat.id, '–ù–∏—á—å—è! –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ? /start', parse_mode='HTML')
        time.sleep(0.5)

    else:
        letsplay(call.message, data)


def incorrect(message: types.Message) -> None:
    """
    –ü—Ä–∏ –∫–∞–∫–æ–º-–ª–∏–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –≤–≤–æ–¥–µ –¥–æ–ª–∂–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å —Å—é–¥–∞
    """
    bot.send_message(message.chat.id, '–°–ª—É—á–∏–ª–æ—Å—å —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ... —è –µ—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ... '
                                      '–¥–∞ –¥–∞–∂–µ —è –º–æ–≥—É –±—ã—Ç—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é –≤–∞—Å –≤ –Ω–∞—á–∞–ª–æ')
    base_game_func(message)


@bot.message_handler(state="*", commands=['cancel'])
def any_state(message: types.Message) -> None:
    """
    –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –≤ States –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    data = cash_storage.get_data(message.from_user.id, message.chat.id)
    # '–æ—á–∏—â–∞–µ—Ç' –ø–æ–ª–µ
    data['zone'] = ['1','2','3','4','5','6','7','8','9']

    bot.send_message(message.chat.id, "–ù–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞!")

    # –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É —Å–Ω–∞—á–∞–ª–∞
    base_game_func(message)


@bot.message_handler(content_types=['text'])
def date_from_user(message: types.Message) -> None:
    """
    –ë–∞–∑–æ–≤—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –º–µ–Ω—é, –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å—Å—è –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    """
    if message.text == 'üëã –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä–∞—Ç—å!':
        base_game_func(message)
    if message.text == '‚ùì Help/Menu':
        send_welcome(message)



bot.add_custom_filter(custom_filters.StateFilter(bot))
bot.add_custom_filter(custom_filters.IsDigitFilter())

bot.infinity_polling(skip_pending=True)